<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsTool>true</IsTool>
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<PackageType>Template</PackageType>
		<ContentTargetFolders>content</ContentTargetFolders>
		<EnableDefaultItems>False</EnableDefaultItems>

		<!-- required for .vsconfig -->
		<NoDefaultExcludes>true</NoDefaultExcludes>

		<!-- Disable package generation for WinUI converted build -->
		<IsPackable Condition="'$(UNO_UWP_BUILD)'=='false'">false</IsPackable>
		<NoWarn>$(NoWarn);NU5128</NoWarn>
	</PropertyGroup>

	<PropertyGroup>
		<!-- If you update Extensions or Uno version, make sure you update the versions in the reinstall.ps1 file too !-->
		<UnoExtensionsVersion Condition="'$(UnoExtensionsVersion)' == ''">3.0.11</UnoExtensionsVersion>
		<UnoVersion Condition="'$(UnoVersion)' == ''">5.0.48</UnoVersion>
		
		<UnoExtensionsLoggingVersion Condition="'$(UnoExtensionsLoggingVersion)' == ''">1.7.0</UnoExtensionsLoggingVersion>
		<SkiaSharpVersion Condition="'$(SkiaSharpVersion)' == ''">2.88.6</SkiaSharpVersion>
		<UnoCoreExtensionsLoggingVersion Condition="'$(UnoCoreExtensionsLoggingVersion)' == ''">4.0.1</UnoCoreExtensionsLoggingVersion>
		<UnoThemesVersion Condition="'$(UnoThemesVersion)' == ''">4.0.6</UnoThemesVersion>
		<UnoDspTasksVersion Condition="'$(UnoDspTasksVersion)' == ''">1.2.7</UnoDspTasksVersion>
		<UnoToolkitVersion Condition="'$(UnoToolkitVersion)' == ''">5.0.17</UnoToolkitVersion>
		<UnoToolkitMarkupVersion Condition="'$(UnoToolkitMarkupVersion)' == ''">5.0.17</UnoToolkitMarkupVersion>
		<UnoResizetizerVersion Condition="'$(UnoResizetizerVersion)' == ''">1.2.0</UnoResizetizerVersion>
		<UnoUniversalImageLoaderVersion Condition="'$(UnoUniversalImageLoaderVersion)' == ''">1.9.36</UnoUniversalImageLoaderVersion>
		<UnoWasmBootstrapVersionNet7 Condition="'$(UnoWasmBootstrapVersionNet7)' == ''">7.0.31</UnoWasmBootstrapVersionNet7>
		<UnoWasmBootstrapVersionNet8 Condition="'$(UnoWasmBootstrapVersionNet8)' == ''">8.0.4</UnoWasmBootstrapVersionNet8>
		<UnoMarkupVersion Condition="'$(UnoMarkupVersion)' == ''">5.0.13</UnoMarkupVersion>
		<UnoUITestHelpersVersion Condition="'$(UnoUITestHelpersVersion)' == ''">1.1.0-dev.70</UnoUITestHelpersVersion>
	</PropertyGroup>
	<PropertyGroup>
		<PackageTags>dotnet-new;templates;uno-platform</PackageTags>
		<PackageProjectUrl>https://github.com/unoplatform/uno.templates</PackageProjectUrl>
		<Description>Templates for creating Uno Platform apps and libraries</Description>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageTags>dotnet-new;templates;uno-platform;webassembly;ios;android;uwp;winui;macos;winappsdk</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<TemplateFile Include="content/**/*" Exclude="**/obj/**;**/bin/**" />
		<MauiControlsTemplateFile Include="content/unoapp/MyExtensionsApp._1.MauiControls/**/*" Exclude="**/obj/**;**/bin/**" />
		<UpToDateCheckInput Include="@(TemplateFile)" />
		<MergeTemplatePackage Include="Uno.ProjectTemplates.Dotnet" Version="$(UnoVersion)">
			<FileExists>false</FileExists>
		</MergeTemplatePackage>

		<!-- Workaround for NU5017-->
	</ItemGroup>

	<ItemGroup>
		<Folder Include="content\" />
	</ItemGroup>

	<Target Name="PrepareTemplateFiles" BeforeTargets="ReplaceVersions" AfterTargets="DownloadTemplatePackages;ExtractPackages">
		<PropertyGroup>
			<TemplateContentFolder>$([System.IO.Path]::Combine($(IntermediateOutputPath), 'content'))</TemplateContentFolder>
		</PropertyGroup>

		<RemoveDir Directories="$(TemplateContentFolder)" />

		<!-- Ensure we keep the .gitignore up to date with the latest changes to the official VisualStudio.gitignore -->
		<DownloadFile
			DestinationFolder="$(TemplateContentFolder)/unoapp"
			DestinationFileName=".gitignore"
			SourceUrl="https://raw.githubusercontent.com/github/gitignore/main/VisualStudio.gitignore" />

		<!-- Add our custom ignore for Single TFM targeting -->
		<AppendSingleTargetIgnore Filename="$(TemplateContentFolder)/unoapp/.gitignore" />

		<Copy SourceFiles="@(TemplateFile)" DestinationFiles="$(TemplateContentFolder)/%(RecursiveDir)%(Filename)%(Extension)" SkipUnchangedFiles="false" />
		<Copy SourceFiles="content/unoapp/GitHub/Install-WindowsSdkISO.cips" DestinationFiles="$(TemplateContentFolder)/unoapp/AzurePipelines/Install-WindowsSdkISO.cips" SkipUnchangedFiles="false" />
		<Copy SourceFiles="content/unoapp/MyExtensionsApp._1.DataContracts/WeatherForecast.cs" DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp._1.Server/WeatherForecast.cs" SkipUnchangedFiles="false" />
		<Copy SourceFiles="content/unoapp/MyExtensionsApp._1.Windows/Package.appxmanifest" DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp._1.Skia.Gtk/Package.appxmanifest" SkipUnchangedFiles="false" />
		<Copy SourceFiles="content/unoapp/MyExtensionsApp._1.Windows/Package.appxmanifest" DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp._1.Skia.Linux.FrameBuffer/Package.appxmanifest" SkipUnchangedFiles="false" />
		<Copy SourceFiles="content/unoapp/MyExtensionsApp._1.Windows/Package.appxmanifest" DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp._1.Skia.WPF/Package.appxmanifest" SkipUnchangedFiles="false" />
		<Copy SourceFiles="@(MauiControlsTemplateFile)" DestinationFiles="$(TemplateContentFolder)/unomauilib/%(RecursiveDir)%(Filename)%(Extension)" SkipUnchangedFiles="false" />
		<ItemGroup>
			<_PackageFiles Include="$(TemplateContentFolder)/**/*" PackagePath="content" />
		</ItemGroup>
	</Target>

	<Target Name="ReplaceVersions" BeforeTargets="BeforeBuild" AfterTargets="PrepareTemplateFiles">
		<ItemGroup>
			<_TemplateJson Include="$(IntermediateOutputPath)/content/**/template.json" />
			<_MauiLibTemplateFile Include="$(TemplateContentFolder)/unomauilib/**" />
		</ItemGroup>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoExtensionsVersion" ReplacementText="$(UnoExtensionsVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoWinUIVersion" ReplacementText="$(UnoVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoExtensionsLoggingVersion" ReplacementText="$(UnoExtensionsLoggingVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultSkiaSharpVersion" ReplacementText="$(SkiaSharpVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoCoreExtensionsLoggingVersion" ReplacementText="$(UnoCoreExtensionsLoggingVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoThemesVersion" ReplacementText="$(UnoThemesVersion)"/>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoDspTasksVersion" ReplacementText="$(UnoDspTasksVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoToolkitVersion" ReplacementText="$(UnoToolkitVersion)"/>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoToolkitMarkupVersion" ReplacementText="$(UnoToolkitMarkupVersion)"/>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoResizetizerVersion" ReplacementText="$(UnoResizetizerVersion)"/>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoUniversalImageLoaderVersion" ReplacementText="$(UnoUniversalImageLoaderVersion)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoWasmBootstrapVersionNet7" ReplacementText="$(UnoWasmBootstrapVersionNet7)" />
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoWasmBootstrapVersionNet8" ReplacementText="$(UnoWasmBootstrapVersionNet8)"/>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoMarkupVersion" ReplacementText="$(UnoMarkupVersion)"/>
		<ReplaceFileText Filename="%(_TemplateJson.Identity)" MatchExpression="DefaultUnoUITestHelpersVersion" ReplacementText="$(UnoUITestHelpersVersion)"/>
		<ReplaceFileText Filename="%(_MauiLibTemplateFile.Identity)" MatchExpression="MyExtensionsApp\._1\.MauiControls" ReplacementText="MyExtensionsApp._1" />
	</Target>

	<Target Name="DownloadTemplatePackages" BeforeTargets="BeforeBuild;PrepareTemplateFiles">
		<!-- Define download directory and make sure it exists-->
		<PropertyGroup>
			<_TemplatesFolder>$([System.IO.Path]::Combine($(IntermediateOutputPath), 'templates'))</_TemplatesFolder>
			<TemplateDownloadFolder>$([System.IO.Path]::Combine($(_TemplatesFolder), 'download'))</TemplateDownloadFolder>
		</PropertyGroup>
		<MakeDir Directories="$(TemplateDownloadFolder)" />

		<ItemGroup>
			<MergeTemplatePackage Update="@(MergeTemplatePackage)" Condition="Exists('$(TemplateDownloadFolder)\%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg')">
				<FileExists>true</FileExists>
			</MergeTemplatePackage>
			<OldTemplatePackages Include="$(TemplateDownloadFolder)\%(MergeTemplatePackage.Identity).*" Exclude="$(TemplateDownloadFolder)\%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg" />
		</ItemGroup>

		<Delete Files="@(OldTemplatePackages)" />

		<DownloadFile Condition="!%(MergeTemplatePackage.FileExists)" DestinationFolder="$(TemplateDownloadFolder)" DestinationFileName="%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg" SourceUrl="https://pkgs.dev.azure.com/uno-platform/1dd81cbd-cb35-41de-a570-b0df3571a196/_apis/packaging/feeds/e7ce08df-613a-41a3-8449-d42784dd45ce/nuget/packages/%(MergeTemplatePackage.Identity)/versions/%(MergeTemplatePackage.Version)/content" SkipUnchangedFiles="true" />
		<!-- Timeout="10000" /> -->

		<!-- Create an ItemGroup containing the file names of the downloaded packages -->
		<ItemGroup>
			<_TemplatePackages Include="$(TemplateDownloadFolder)/%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg">
				<FileExists>%(MergeTemplatePackage.FileExists)</FileExists>
			</_TemplatePackages>
		</ItemGroup>

	</Target>

	<Target Name="ExtractPackages" AfterTargets="DownloadTemplatePackages" BeforeTargets="BeforeBuild;PrepareTemplateFiles">
		<!-- Define and make sure the extract folder exists -->
		<PropertyGroup>
			<TemplateUnzipFolder>$([System.IO.Path]::Combine($(_TemplatesFolder), 'extract'))</TemplateUnzipFolder>
		</PropertyGroup>

		<RemoveDir Directories="$(TemplateUnzipFolder)" Condition="!%(MergeTemplatePackage.FileExists)" />

		<PropertyGroup>
			<UnzipAll>false</UnzipAll>
			<UnzipAll Condition="!Exists('$(TemplateUnzipFolder)')">true</UnzipAll>
		</PropertyGroup>

		<MakeDir Directories="$(TemplateUnzipFolder)" />

		<!-- Unzip each of the downloade packages -->
		<Unzip SourceFiles="%(_TemplatePackages.Identity)" DestinationFolder="$(TemplateUnzipFolder)" Condition="!%(_TemplatePackages.FileExists) or $(UnzipAll)" />

		<ItemGroup>
			<_ExternalTemplateExcludes Include="$(TemplateUnzipFolder)/content/unoapp-winui/**" />
			<TemplateFile Include="$(TemplateUnzipFolder)/content/**/*" Exclude="@(_ExternalTemplateExcludes)" />
		</ItemGroup>
	</Target>

	<UsingTask TaskName="AppendSingleTargetIgnore" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Filename ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					File.AppendAllText(
						Filename,
						Environment.NewLine + "# Single Target Config" + Environment.NewLine + "solution-config.props" +
						Environment.NewLine + "# Windows Publish Profiles" + Environment.NewLine + "!**/*.Windows/Properties/PublishProfiles/*.pubxml" 
						);
				]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- Using Regex Replace prevents XmlPoke from replacing Tabs with Spaces -->
	<UsingTask TaskName="ReplaceFileText" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Filename ParameterType="System.String" Required="true" />
			<MatchExpression ParameterType="System.String" Required="true" />
			<ReplacementText ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					File.WriteAllText(
						Filename,
						Regex.Replace(File.ReadAllText(Filename), MatchExpression, ReplacementText)
						);
				]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
